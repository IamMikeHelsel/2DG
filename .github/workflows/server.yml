name: server-deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'packages/server/**'
      - 'packages/shared/**'
      - 'Dockerfile*'
      - 'fly.toml'
      - 'package.json'
      - 'pnpm-workspace.yaml'
      - 'tsconfig.base.json'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Enable corepack / pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9.0.0 --activate
          
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
        
      - name: Run tests
        run: pnpm -F @toodee/server test || echo "Tests failed but continuing deployment"
        
      - name: Build packages
        run: |
          pnpm -F @toodee/shared build
          pnpm -F @toodee/server build
          
      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@v1
        
      - name: Deploy to Production
        if: github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main'
        run: |
          echo "Deploying to production..."
          flyctl deploy --remote-only \
            --build-arg NODE_ENV=production \
            --app toodeegame
            
      - name: Deploy to Staging
        if: github.event.inputs.environment == 'staging'
        run: |
          echo "Deploying to staging..."
          flyctl deploy --remote-only \
            --build-arg NODE_ENV=staging \
            --app toodeegame-staging
            
      - name: Health Check
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            HEALTH_URL="https://toodeegame-staging.fly.dev/health"
          else
            HEALTH_URL="https://toodeegame.fly.dev/health"
          fi
          
          echo "Checking health at $HEALTH_URL"
          
          # Wait for deployment to be ready
          sleep 30
          
          # Health check with retry
          for i in {1..5}; do
            if curl -f "$HEALTH_URL"; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying in 10s..."
            sleep 10
          done
          
          echo "Health check failed after 5 attempts"
          exit 1
          
      - name: Post-deployment notification
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ Deployment successful to ${{ github.event.inputs.environment || 'production' }}"
          else
            echo "❌ Deployment failed to ${{ github.event.inputs.environment || 'production' }}"
          fi
