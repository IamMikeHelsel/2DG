name: client-deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'packages/client/**'
      - 'packages/shared/**'
      - 'package.json'
      - 'pnpm-workspace.yaml'
      - 'tsconfig.base.json'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  build-and-deploy:
    permissions:
      contents: read
      pages: write
      id-token: write
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Enable corepack / pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9.0.0 --activate
          
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
        
      - name: Build shared package
        run: pnpm -F @toodee/shared build
        
      - name: Build client for production
        if: github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main'
        env:
          VITE_SERVER_URL: ${{ secrets.VITE_SERVER_URL }}
          NODE_ENV: production
        run: pnpm -F @toodee/client build
        
      - name: Build client for staging
        if: github.event.inputs.environment == 'staging'
        env:
          VITE_SERVER_URL: ${{ secrets.VITE_SERVER_URL_STAGING }}
          NODE_ENV: staging
        run: pnpm -F @toodee/client build
        
      - name: Optimize build artifacts
        run: |
          cd packages/client/dist
          
          # Generate build info
          echo "{" > build-info.json
          echo "  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"," >> build-info.json
          echo "  \"commit\": \"${{ github.sha }}\"," >> build-info.json
          echo "  \"branch\": \"${{ github.ref_name }}\"," >> build-info.json
          echo "  \"environment\": \"${{ github.event.inputs.environment || 'production' }}\"," >> build-info.json
          echo "  \"workflow\": \"${{ github.run_id }}\"" >> build-info.json
          echo "}" >> build-info.json
          
          # Show build size info
          echo "Build size information:"
          du -sh *
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: packages/client/dist
          
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        
      - name: Verify deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          # Verify the deployment is accessible
          if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            # For staging, we'd need a different URL - this is a placeholder
            SITE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          else
            SITE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          fi
          
          echo "Checking deployment at $SITE_URL"
          
          for i in {1..3}; do
            if curl -f "$SITE_URL" > /dev/null 2>&1; then
              echo "‚úÖ Deployment verification successful!"
              exit 0
            fi
            echo "Deployment check attempt $i failed, retrying in 10s..."
            sleep 10
          done
          
          echo "‚ö†Ô∏è Deployment verification failed, but this might be due to propagation delay"
          
      - name: Post-deployment summary
        run: |
          echo "üöÄ Client deployment completed!"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Build artifacts uploaded to GitHub Pages"
